import net.fabricmc.loom.task.RemapJarTask
import org.apache.commons.codec.digest.DigestUtils

buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.135'
		classpath 'commons-codec:commons-codec:1.6'
	}
}
plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "org.ajoberstar.grgit" version "3.1.0"
}
def ENV = System.getenv()
version = project.version;
def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
	project.dependencies {
		deps.each {
			api it
		}
	}
}

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}


import org.kohsuke.github.GHReleaseBuilder;

def getSubprojectVersion(project) {
	// Get the version from the gradle.properties file
	def version = project.properties["${project.name}-version"]

	return version
}


allprojects {
	apply plugin: 'fabric-loom'

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	archivesBaseName = project.archives_base_name
	//version = project.mod_version
	group = project.maven_group

	repositories {
		maven { url "https://maven.terraformersmc.com/releases" }
		maven {
			name = "Ladysnake Libs"
			url = "https://ladysnake.jfrog.io/artifactory/mods"
		}
		maven { url 'https://jitpack.io' }
		maven {
			url "https://cursemaven.com"
		}
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
	}

	loom {
		shareRemapCaches = true
	}


	dependencies {
		// To change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// Fabric API. This is technically optional, but you probably want it anyway.
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

		modImplementation "com.terraformersmc:modmenu:3.0.0", {
			exclude module: "fabric-api"
		}

		modImplementation "dev.emi:trinkets:3.0.4"
		// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
		// You may need to force-disable transitiveness on them.
	}

	afterEvaluate {
		artifacts {
			dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
		}
	}

	repositories {
		mavenLocal()
	}

	configurations {
		dev
	}

	processResources {
		inputs.property "version", project.version
		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(JavaCompile).configureEach {
		// ensure that the encoding is set to UTF-8, no matter what the system default is
		// this fixes some edge cases with special characters not displaying correctly
		// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
		// If Javadoc is generated, this must be specified in that task too.
		it.options.encoding = "UTF-8"

		// Minecraft 1.17 (21w19a) upwards uses Java 17.
		it.options.release = 17
	}

	java {
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}
	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}" }
		}
	}

	task remapMavenJar(type: RemapJarTask, dependsOn: remapJar) {
		input = jar.archiveFile
		archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
		addNestedDependencies = false
	}
	// for subprojects
	task remapTheJar(type: RemapJarTask, dependsOn: remapJar) {
		input = jar.archiveFile
		archiveFileName = "${archivesBaseName}-${project.version}-remapped.jar"
	}
	build.dependsOn remapMavenJar

// configure the maven publication
	publishing {
		publications {
			mavenJava(MavenPublication) {
				// add all the jars that should be included when publishing to maven
				artifact(remapJar) {
					builtBy remapJar
				}
				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}

		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		repositories {
			// Add repositories to publish to here.
			// Notice: This block does NOT have the same function as the block in the top level.
			// The repositories here will be used for publishing your artifact, not for
			// retrieving dependencies.
		}
	}
}

subprojects {
	build.dependsOn remapTheJar
}
subprojects.each {
	remapJar.dependsOn("${it.path}:remapJar")
}


subprojects {
	runClient {
		enabled = false
	}
	runServer {
		enabled = false
	}
}

def dontInclude = [

]

dependencies {
	afterEvaluate {

		subprojects.each {
			api project(path: ":${it.name}", configuration: "namedElements")

			if (!(it.name in dontInclude)) {
				include project("${it.name}:")
			}

			//testmodImplementation project("${it.name}:").sourceSets.testmod.output
		}
	}
}

curseforge {
	if (ENV.CURSEFORGE_API_KEY) {
		apiKey = ENV.CURSEFORGE_API_KEY
	}

	project {
		id = "INSERT CURSEFORGE ID HERE"
		changelog = ENV.CHANGELOG ?: "No changelog provided"
		releaseType = project.prerelease == "true" ? "beta" : "release"
		addGameVersion "1.18.1"
		addGameVersion "1.18"
		addGameVersion "Fabric"
		addGameVersion "Java 17"

		mainArtifact(remapJar) {
			displayName = "[$project.minecraft_version] Example Mod $project.version"
			relations {
				requiredDependency 'fabric-api'
			}
		}

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}

	options {
		forgeGradleIntegration = false
	}
}


import org.kohsuke.github.GitHub

task github(dependsOn: remapMavenJar) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("[$project.minecraft_version] ThonkUtil $project.version")
		releaseBuilder.body(ENV.CHANGELOG ?: "No changelog provided")
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(project.prerelease == "true")

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
	}
}

apply from: "gradle/module-versioning.gradle"